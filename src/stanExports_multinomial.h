// Generated by rstantools.  Do not edit by hand.

/*
    abStanModels is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    abStanModels is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with abStanModels.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_multinomial_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 22> locations_array__ =
  {" (found before start of program)",
  " (in 'multinomial', line 10, column 10 to column 29)",
  " (in 'multinomial', line 11, column 10 to column 29)",
  " (in 'multinomial', line 20, column 5 to column 51)",
  " (in 'multinomial', line 21, column 5 to column 51)",
  " (in 'multinomial', line 22, column 5 to column 51)",
  " (in 'multinomial', line 14, column 10 to column 37)",
  " (in 'multinomial', line 15, column 10 to column 37)",
  " (in 'multinomial', line 16, column 15 to column 40)",
  " (in 'multinomial', line 17, column 15 to column 40)",
  " (in 'multinomial', line 2, column 10 to column 26)",
  " (in 'multinomial', line 3, column 26 to column 28)",
  " (in 'multinomial', line 3, column 10 to column 30)",
  " (in 'multinomial', line 4, column 26 to column 28)",
  " (in 'multinomial', line 4, column 10 to column 37)",
  " (in 'multinomial', line 5, column 10 to column 26)",
  " (in 'multinomial', line 6, column 26 to column 28)",
  " (in 'multinomial', line 6, column 10 to column 30)",
  " (in 'multinomial', line 7, column 26 to column 28)",
  " (in 'multinomial', line 7, column 10 to column 37)",
  " (in 'multinomial', line 10, column 18 to column 20)",
  " (in 'multinomial', line 11, column 18 to column 20)"};
#include <stan_meta_header.hpp>
class model_multinomial final : public model_base_crtp<model_multinomial> {
private:
  int K1;
  std::vector<int> y1;
  Eigen::Matrix<double,-1,1> alpha1_data__;
  int K2;
  std::vector<int> y2;
  Eigen::Matrix<double,-1,1> alpha2_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> alpha1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> alpha2{nullptr, 0};
public:
  ~model_multinomial() {}
  model_multinomial(stan::io::var_context& context__, unsigned int
                    random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_multinomial_namespace::model_multinomial";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 10;
      context__.validate_dims("data initialization", "K1", "int",
        std::vector<size_t>{});
      K1 = std::numeric_limits<int>::min();
      current_statement__ = 10;
      K1 = context__.vals_i("K1")[(1 - 1)];
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "K1", K1, 1);
      current_statement__ = 11;
      stan::math::validate_non_negative_index("y1", "K1", K1);
      current_statement__ = 12;
      context__.validate_dims("data initialization", "y1", "int",
        std::vector<size_t>{static_cast<size_t>(K1)});
      y1 = std::vector<int>(K1, std::numeric_limits<int>::min());
      current_statement__ = 12;
      y1 = context__.vals_i("y1");
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "y1", y1, 0);
      current_statement__ = 13;
      stan::math::validate_non_negative_index("alpha1", "K1", K1);
      current_statement__ = 14;
      context__.validate_dims("data initialization", "alpha1", "double",
        std::vector<size_t>{static_cast<size_t>(K1)});
      alpha1_data__ = Eigen::Matrix<double,-1,1>::Constant(K1,
                        std::numeric_limits<double>::quiet_NaN());
      new (&alpha1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(alpha1_data__.data(), K1);
      {
        std::vector<local_scalar_t__> alpha1_flat__;
        current_statement__ = 14;
        alpha1_flat__ = context__.vals_r("alpha1");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= K1; ++sym1__) {
          current_statement__ = 14;
          stan::model::assign(alpha1, alpha1_flat__[(pos__ - 1)],
            "assigning variable alpha1", stan::model::index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "alpha1", alpha1, 0);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "K2", "int",
        std::vector<size_t>{});
      K2 = std::numeric_limits<int>::min();
      current_statement__ = 15;
      K2 = context__.vals_i("K2")[(1 - 1)];
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "K2", K2, 1);
      current_statement__ = 16;
      stan::math::validate_non_negative_index("y2", "K2", K2);
      current_statement__ = 17;
      context__.validate_dims("data initialization", "y2", "int",
        std::vector<size_t>{static_cast<size_t>(K2)});
      y2 = std::vector<int>(K2, std::numeric_limits<int>::min());
      current_statement__ = 17;
      y2 = context__.vals_i("y2");
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "y2", y2, 0);
      current_statement__ = 18;
      stan::math::validate_non_negative_index("alpha2", "K2", K2);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "alpha2", "double",
        std::vector<size_t>{static_cast<size_t>(K2)});
      alpha2_data__ = Eigen::Matrix<double,-1,1>::Constant(K2,
                        std::numeric_limits<double>::quiet_NaN());
      new (&alpha2)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(alpha2_data__.data(), K2);
      {
        std::vector<local_scalar_t__> alpha2_flat__;
        current_statement__ = 19;
        alpha2_flat__ = context__.vals_r("alpha2");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= K2; ++sym1__) {
          current_statement__ = 19;
          stan::model::assign(alpha2, alpha2_flat__[(pos__ - 1)],
            "assigning variable alpha2", stan::model::index_uni(sym1__));
          current_statement__ = 19;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "alpha2", alpha2, 0);
      current_statement__ = 20;
      stan::math::validate_positive_index("theta1", "K1", K1);
      current_statement__ = 21;
      stan::math::validate_positive_index("theta2", "K2", K2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (K1 - 1) + (K2 - 1);
  }
  inline std::string model_name() const final {
    return "model_multinomial";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_multinomial_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> theta1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K1, DUMMY_VAR__);
      current_statement__ = 1;
      theta1 = in__.template read_constrain_simplex<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K1);
      Eigen::Matrix<local_scalar_t__,-1,1> theta2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K2, DUMMY_VAR__);
      current_statement__ = 2;
      theta2 = in__.template read_constrain_simplex<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K2);
      {
        current_statement__ = 6;
        lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(theta1, alpha1));
        current_statement__ = 7;
        lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(theta2, alpha2));
        current_statement__ = 8;
        lp_accum__.add(stan::math::multinomial_lpmf<propto__>(y1, theta1));
        current_statement__ = 9;
        lp_accum__.add(stan::math::multinomial_lpmf<propto__>(y2, theta2));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_multinomial_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> theta1 =
        Eigen::Matrix<double,-1,1>::Constant(K1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      theta1 = in__.template read_constrain_simplex<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K1);
      Eigen::Matrix<double,-1,1> theta2 =
        Eigen::Matrix<double,-1,1>::Constant(K2,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      theta2 = in__.template read_constrain_simplex<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K2);
      out__.write(theta1);
      out__.write(theta2);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double diff_theta_1_2_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      diff_theta_1_2_1 = (stan::model::rvalue(theta2, "theta2",
                            stan::model::index_uni(1))
        - stan::model::rvalue(theta1, "theta1", stan::model::index_uni(1)));
      double diff_theta_1_2_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      diff_theta_1_2_2 = (stan::model::rvalue(theta2, "theta2",
                            stan::model::index_uni(2))
        - stan::model::rvalue(theta1, "theta1", stan::model::index_uni(2)));
      double diff_theta_1_2_3 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      diff_theta_1_2_3 = (stan::model::rvalue(theta2, "theta2",
                            stan::model::index_uni(3))
        - stan::model::rvalue(theta1, "theta1", stan::model::index_uni(3)));
      out__.write(diff_theta_1_2_1);
      out__.write(diff_theta_1_2_2);
      out__.write(diff_theta_1_2_3);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> theta1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K1, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(theta1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K1),
        "assigning variable theta1");
      out__.write_free_simplex(theta1);
      Eigen::Matrix<local_scalar_t__,-1,1> theta2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K2, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(theta2,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K2),
        "assigning variable theta2");
      out__.write_free_simplex(theta2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "theta1", "double",
        std::vector<size_t>{static_cast<size_t>(K1)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "theta2", "double",
        std::vector<size_t>{static_cast<size_t>(K2)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> theta1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta1_flat__;
        current_statement__ = 1;
        theta1_flat__ = context__.vals_r("theta1");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K1; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(theta1, theta1_flat__[(pos__ - 1)],
            "assigning variable theta1", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(theta1);
      Eigen::Matrix<local_scalar_t__,-1,1> theta2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K2, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta2_flat__;
        current_statement__ = 2;
        theta2_flat__ = context__.vals_r("theta2");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K2; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(theta2, theta2_flat__[(pos__ - 1)],
            "assigning variable theta2", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(theta2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"theta1", "theta2"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"diff_theta_1_2_1", "diff_theta_1_2_2", "diff_theta_1_2_3"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    K1)},
                std::vector<size_t>{static_cast<size_t>(K2)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K1; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K2; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta2" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "diff_theta_1_2_1");
      param_names__.emplace_back(std::string() + "diff_theta_1_2_2");
      param_names__.emplace_back(std::string() + "diff_theta_1_2_3");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= (K1 - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "theta1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (K2 - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "theta2" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "diff_theta_1_2_1");
      param_names__.emplace_back(std::string() + "diff_theta_1_2_2");
      param_names__.emplace_back(std::string() + "diff_theta_1_2_3");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K1) + "},\"block\":\"parameters\"},{\"name\":\"theta2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K2) + "},\"block\":\"parameters\"},{\"name\":\"diff_theta_1_2_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"diff_theta_1_2_2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"diff_theta_1_2_3\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((K1 -1)) + "},\"block\":\"parameters\"},{\"name\":\"theta2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((K2 -1)) + "},\"block\":\"parameters\"},{\"name\":\"diff_theta_1_2_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"diff_theta_1_2_2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"diff_theta_1_2_3\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (K1 + K2);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((1 + 1) +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (K1 + K2);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((1 + 1) +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_multinomial_namespace::model_multinomial;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_multinomial_namespace::profiles__;
}
#endif
#endif
